# These values configure the Grafana Mimir or Grafana Enterprise Metrics cluster
# for higher scale than the default values, but not for high-availability production use.
# The setup targets 70% CPU and memory utilization
# so that the cluster has room to grow. The resource requests reflect 70% utilization
# and the limits reflect 100% utilization. The values do not set CPU limits,
# because CPU limits have caused severe issues elsewhere, so we don't apply any in our helm chart:
# see https://engineering.indeedblog.com/blog/2019/12/unthrottled-fixing-cpu-limits-in-the-cloud/
# If you require CPU limits for billing purposes see capped-small.yaml
#
# These values are suitable for ingestion of ~1M series and scrape interval of 15s.
# This implies ingestion rate of around 66000 samples per second.
#
# Query requirements can vary dramatically depending on query rate and query
# ranges. The values here satisfy a "usual" query load of around 5 queries per second
# as seen from our production clusters at this scale.
#
# The values in this file also add podAntiAffinity rules for ingesters and store-gateways.
# The rules ensure that the replicas of the same component are not scheduled on the same
# Kubernetes Node. Zone-aware replication is enabled by default on new installation.
# Refer to [Migrate from single zone to zone-aware replication with Helm](https://grafana.com/docs/mimir/latest/migration-guide/migrating-from-single-zone-with-helm) and
# [Zone-Aware Replication](https://grafana.com/docs/mimir/latest/configure/configure-zone-aware-replication/)
# for more information.
#
minio:
  enabled: false
  
global:
  extraEnvFrom:
    - secretRef:
        name: minio-s3-config

# MinIO is no longer enabled, and you are encouraged to use your cloud providers
# object storage service such as S3 or GCS.
mimir:
  structuredConfig:
    common:
      storage:
        backend: s3
        s3:
          endpoint: "${MINIO_ENDPOINT}" # This is a secret injected via an environment variable
          region: "${MINIO_REGION}"
          secret_access_key: "${MINIO_SECRET_ACCESS_KEY}"
          access_key_id: "${MINIO_ACCESS_KEY_ID}"
          http:
            insecure_skip_verify: false

    blocks_storage:
      s3:
        bucket_name: mimir-blocks
    alertmanager_storage:
      s3:
        bucket_name: mimir-alertmanager
    ruler_storage:
      s3:
        bucket_name: mimir-ruler

    # The following admin_client configuration only applies to Grafana Enterprise Metrics deployments:
    #admin_client:
    #  storage:
    #    s3:
    #      bucket_name: gem-admin
alertmanager:
  persistentVolume:
    enabled: true
  replicas: 1
  resources:
    limits:
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi
  statefulSet:
    enabled: true

compactor:
  persistentVolume:
    size: 10Gi
  resources:
    limits:
      memory: 512Mi
    requests:
      cpu: 200m
      memory: 256Mi

distributor:
  replicas: 1
  resources:
    limits:
      memory: 1Gi
    requests:
      cpu: 300m
      memory: 512Mi

ingester:
  persistentVolume:
    size: 20Gi
  replicas: 1
  resources:
    limits:
      memory: 2Gi
    requests:
      cpu: 500m
      memory: 1Gi
  priorityClassName: "high-priority"
  topologySpreadConstraints: {}
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchExpressions:
              - key: target # support for enterprise.legacyLabels
                operator: In
                values:
                  - ingester
          topologyKey: 'kubernetes.io/hostname'

        - labelSelector:
            matchExpressions:
              - key: app.kubernetes.io/component
                operator: In
                values:
                  - ingester
          topologyKey: 'kubernetes.io/hostname'

  zoneAwareReplication:
    topologyKey: 'kubernetes.io/hostname'

admin-cache:
  enabled: true
  replicas: 1

chunks-cache:
  enabled: true
  replicas: 1
  priorityClassName: "high-priority"

index-cache:
  enabled: true
  replicas: 1

metadata-cache:
  enabled: true
  replicas: 1

results-cache:
  enabled: true
  replicas: 1

minio:
  enabled: false

overrides_exporter:
  replicas: 1
  resources:
    limits:
      memory: 128Mi
    requests:
      cpu: 100m
      memory: 128Mi

querier:
  replicas: 1
  resources:
    limits:
      memory: 1Gi
    requests:
      cpu: 300m
      memory: 512Mi

query_frontend:
  replicas: 1
  resources:
    limits:
      memory: 512Mi
    requests:
      cpu: 200m
      memory: 256Mi

ruler:
  replicas: 1
  resources:
    limits:
      memory: 512Mi
    requests:
      cpu: 200m
      memory: 256Mi

store_gateway:
  persistentVolume:
    size: 5Gi
  replicas: 1
  resources:
    limits:
      memory: 512Mi
    requests:
      cpu: 200m
      memory: 256Mi
  priorityClassName: "high-priority"
  topologySpreadConstraints: {}
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchExpressions:
              - key: target # support for enterprise.legacyLabels
                operator: In
                values:
                  - store-gateway
          topologyKey: 'kubernetes.io/hostname'

        - labelSelector:
            matchExpressions:
              - key: app.kubernetes.io/component
                operator: In
                values:
                  - store-gateway
          topologyKey: 'kubernetes.io/hostname'
  zoneAwareReplication:
    topologyKey: 'kubernetes.io/hostname'

nginx:
  replicas: 1
  resources:
    limits:
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi

# Grafana Enterprise Metrics feature related
admin_api:
  replicas: 1
  resources:
    limits:
      memory: 128Mi
    requests:
      cpu: 100m
      memory: 64Mi

gateway:
  replicas: 1
  resources:
    limits:
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi