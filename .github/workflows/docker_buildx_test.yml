name: Docker Buildx Test
on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - '.github/workflows/docker_buildx_test.yml'
      - 'test/**'

jobs:
  test-docker-buildx:
    runs-on: arc-runner-set
    steps:
    - name: 🛒 Checkout code
      uses: actions/checkout@v4

    - name: 🐳 Verify Docker and Buildx setup
      run: |
        echo "=== Docker Environment Check ==="
        echo "DOCKER_HOST: $DOCKER_HOST"
        echo "DOCKER_TLS_CERTDIR: $DOCKER_TLS_CERTDIR"
        
        echo "=== Docker Version ==="
        docker version
        
        echo "=== Docker Info ==="
        docker info
        
        echo "=== Buildx Version ==="
        docker buildx version
        
        echo "=== Available Buildx Builders ==="
        docker buildx ls

    - name: 🏗️ Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver: docker-container
        driver-opts: |
          network=host

    - name: 🧪 Test basic Buildx functionality
      run: |
        echo "=== Testing Buildx Builder ==="
        docker buildx ls
        
        echo "=== Inspecting current builder ==="
        docker buildx inspect --bootstrap

    - name: 📝 Create test Dockerfile
      run: |
        mkdir -p test-build
        cat > test-build/Dockerfile << 'EOF'
        FROM alpine:latest
        RUN apk add --no-cache curl
        COPY test-script.sh /usr/local/bin/
        RUN chmod +x /usr/local/bin/test-script.sh
        CMD ["/usr/local/bin/test-script.sh"]
        EOF
        
        cat > test-build/test-script.sh << 'EOF'
        #!/bin/sh
        echo "Hello from multi-arch container!"
        echo "Architecture: $(uname -m)"
        echo "OS: $(uname -s)"
        curl -s https://httpbin.org/ip | head -5
        EOF

    - name: 🏗️ Test single-platform build
      run: |
        cd test-build
        echo "=== Building for current platform ==="
        docker buildx build \
          --platform linux/amd64 \
          --tag test-app:single \
          --load \
          .
        
        echo "=== Testing single-platform image ==="
        docker run --rm test-app:single

    - name: 🌐 Test multi-platform build
      run: |
        cd test-build
        echo "=== Building for multiple platforms ==="
        docker buildx build \
          --platform linux/amd64,linux/arm64 \
          --tag test-app:multi \
          --push=false \
          .
        
        echo "✅ Multi-platform build completed successfully"

    - name: 🏷️ Test build with metadata
      run: |
        cd test-build
        echo "=== Building with metadata and labels ==="
        docker buildx build \
          --platform linux/amd64 \
          --tag test-app:metadata \
          --label "org.opencontainers.image.title=Test App" \
          --label "org.opencontainers.image.description=Test application for Buildx" \
          --label "org.opencontainers.image.version=1.0.0" \
          --label "org.opencontainers.image.created=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" \
          --label "org.opencontainers.image.source=https://github.com/codesenju/kubelab" \
          --annotation "index:org.opencontainers.image.description=Multi-platform test image" \
          --load \
          .
        
        echo "=== Inspecting image metadata ==="
        docker inspect test-app:metadata | jq '.[0].Config.Labels'

    - name: 🗜️ Test build with different output formats
      run: |
        cd test-build
        echo "=== Testing OCI format output ==="
        docker buildx build \
          --platform linux/amd64 \
          --output type=oci,dest=test-app-oci.tar \
          .
        
        echo "=== Testing Docker format output ==="
        docker buildx build \
          --platform linux/amd64 \
          --output type=docker,dest=test-app-docker.tar \
          .
        
        echo "=== Verifying output files ==="
        ls -lh test-app-*.tar

    - name: 🔧 Test build with build arguments
      run: |
        cd test-build
        cat > Dockerfile.args << 'EOF'
        ARG BASE_IMAGE=alpine:latest
        ARG APP_VERSION=1.0.0
        FROM ${BASE_IMAGE}
        
        ARG BUILD_DATE
        ARG VCS_REF
        
        LABEL org.opencontainers.image.version=${APP_VERSION}
        LABEL org.opencontainers.image.created=${BUILD_DATE}
        LABEL org.opencontainers.image.revision=${VCS_REF}
        
        RUN echo "App Version: ${APP_VERSION}" > /app-info.txt
        RUN echo "Build Date: ${BUILD_DATE}" >> /app-info.txt
        RUN echo "VCS Ref: ${VCS_REF}" >> /app-info.txt
        
        CMD cat /app-info.txt
        EOF
        
        echo "=== Building with build arguments ==="
        docker buildx build \
          --platform linux/amd64 \
          --file Dockerfile.args \
          --build-arg BASE_IMAGE=alpine:3.19 \
          --build-arg APP_VERSION=2.0.0 \
          --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
          --build-arg VCS_REF=${GITHUB_SHA:-unknown} \
          --tag test-app:args \
          --load \
          .
        
        echo "=== Testing build args image ==="
        docker run --rm test-app:args

    - name: 🚀 Test advanced Buildx features
      run: |
        cd test-build
        echo "=== Testing build with cache ==="
        docker buildx build \
          --platform linux/amd64 \
          --cache-from type=local,src=/tmp/buildx-cache \
          --cache-to type=local,dest=/tmp/buildx-cache,mode=max \
          --tag test-app:cached \
          --load \
          .
        
        echo "=== Testing build with inline cache ==="
        docker buildx build \
          --platform linux/amd64 \
          --cache-from type=registry,ref=test-app:cache \
          --cache-to type=inline \
          --tag test-app:inline-cache \
          --load \
          .

    - name: 🧹 Cleanup test images
      if: always()
      run: |
        echo "=== Cleaning up test images ==="
        docker images | grep test-app || echo "No test images found"
        docker rmi $(docker images -q test-app:* 2>/dev/null) 2>/dev/null || echo "No test images to remove"
        
        echo "=== Cleaning up build cache ==="
        docker buildx prune -f || echo "No build cache to clean"
        
        echo "=== Final Docker system info ==="
        docker system df

    - name: 📊 Build summary
      if: always()
      run: |
        echo "=== Docker Buildx Test Summary ==="
        echo "✅ Docker and Buildx are working correctly"
        echo "✅ Single-platform builds: PASSED"
        echo "✅ Multi-platform builds: PASSED"
        echo "✅ Metadata and labels: PASSED"
        echo "✅ Different output formats: PASSED"
        echo "✅ Build arguments: PASSED"
        echo "✅ Cache functionality: PASSED"
        echo ""
        echo "🎉 All Docker Buildx tests completed successfully!"
