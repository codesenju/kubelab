name: Actions Runner Controller Demo
on:
  workflow_dispatch:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/test-app

jobs:
  test-arc-functionality:
    runs-on: arc-runner-set
    permissions:
      contents: read
      packages: write
    steps:
    - name: üéâ Welcome message
      run: echo "üéâ This job uses runner scale set runners!"
      
    - name: üîç Explore runner environment
      run: |
        echo "üñ•Ô∏è The job was automatically triggered by a ${{ github.event_name }} event."
        echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
        echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
        echo "üí° Runner name: ${{ runner.name }}"
        echo "üè† Runner workspace: ${{ runner.workspace }}"
        
    - name: üìã System information
      run: |
        echo "=== System Information ==="
        uname -a
        echo "=== CPU Information ==="
        nproc
        echo "=== Memory Information ==="
        free -h
        echo "=== Disk Space ==="
        df -h
        echo "=== Available Tools ==="
        which git || echo "git not found"
        which curl || echo "curl not found"
        which wget || echo "wget not found"
        which node || echo "node not found"
        which python3 || echo "python3 not found"
        which docker || echo "docker not found"
        
    - name: üõí Check out repository code
      uses: actions/checkout@v4
      
    - name: üìù Create test files
      run: |
        echo "console.log('Hello from ARC Runner!');" > app.js
        cat > package.json << 'EOF'
        {
          "name": "arc-test-app",
          "version": "1.0.0",
          "description": "Test application for ARC functionality",
          "main": "app.js",
          "scripts": {
            "start": "node app.js"
          }
        }
        EOF
        echo "# ARC Test Application" > README.md
        echo "This is a test application created by the ARC runner." >> README.md
        
    - name: üìÇ List workspace contents
      run: |
        echo "=== Workspace Contents ==="
        ls -la
        echo "=== Repository Files ==="
        find . -type f -name "*.md" -o -name "*.yml" -o -name "*.yaml" | head -10
        
    - name: üß™ Test basic commands
      run: |
        echo "=== Testing Basic Commands ==="
        echo "Current user: $(whoami)"
        echo "Current directory: $(pwd)"
        echo "Environment variables:"
        env | grep -E "(GITHUB_|RUNNER_)" | sort
        
    - name: üîß Test file operations
      run: |
        echo "=== Testing File Operations ==="
        mkdir -p test-dir
        echo "Test content" > test-dir/test-file.txt
        cat test-dir/test-file.txt
        ls -la test-dir/
        rm -rf test-dir
        echo "File operations completed successfully!"
        
    - name: üåê Test network connectivity
      run: |
        echo "=== Testing Network Connectivity ==="
        curl -s -o /dev/null -w "GitHub API: %{http_code}\n" https://api.github.com/
        curl -s -o /dev/null -w "Google: %{http_code}\n" https://www.google.com/
        echo "Network tests completed!"
        
    - name: üìä Runner resource usage
      run: |
        echo "=== Resource Usage ==="
        free -h
        df -h
        ps aux | head -10
        
    - name: ‚úÖ Success message
      run: |
        echo "üéâ ARC Runner functionality test completed successfully!"
        echo "‚úÖ Basic system commands executed"
        echo "‚úÖ File operations completed"
        echo "‚úÖ Network connectivity verified"
        echo "‚úÖ Repository checkout successful"
        echo "üöÄ Runner scale set is working perfectly!"
        
  test-docker-availability:
    runs-on: arc-runner-set
    steps:
    - name: üê≥ Check Docker availability
      run: |
        echo "=== Docker Availability Check ==="
        if command -v docker &> /dev/null; then
          echo "‚úÖ Docker client is installed"
          docker --version
          echo "Checking Docker daemon connection..."
          if docker info &> /dev/null; then
            echo "‚úÖ Docker daemon is accessible"
            docker ps
            docker images
          else
            echo "‚ùå Docker daemon is not accessible"
            echo "This is expected if Docker-in-Docker is not configured"
          fi
        else
          echo "‚ùå Docker client is not installed"
        fi
        
    - name: üìù Docker configuration notes
      run: |
        echo "=== Docker Configuration Notes ==="
        echo "To enable Docker functionality in ARC runners, you need to:"
        echo "1. Configure Docker-in-Docker (DinD) sidecar container"
        echo "2. Mount Docker socket or use privileged containers"
        echo "3. Update the runner template with proper Docker configuration"
        echo "Current runner is using basic GitHub Actions runner image"
