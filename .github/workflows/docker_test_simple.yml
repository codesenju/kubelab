name: Simple Docker Test
on:
  workflow_dispatch:

jobs:
  test-docker-simple:
    runs-on: arc-runner-set
    steps:
    - name: 🐳 Test Docker with manual host override
      run: |
        echo "=== Testing Docker with different hosts ==="
        
        echo "1. Testing with default DOCKER_HOST:"
        echo "DOCKER_HOST: $DOCKER_HOST"
        docker version || echo "Failed with default host"
        
        echo "2. Testing with port 2375 (non-TLS):"
        export DOCKER_HOST=tcp://localhost:2375
        echo "DOCKER_HOST: $DOCKER_HOST"
        docker version || echo "Failed with port 2375"
        
        echo "3. Testing with port 2376 (TLS):"
        export DOCKER_HOST=tcp://localhost:2376
        echo "DOCKER_HOST: $DOCKER_HOST"
        docker version || echo "Failed with port 2376"
        
        echo "4. Checking what's listening on Docker ports:"
        netstat -tlnp | grep -E "(2375|2376)" || echo "No Docker ports found"
        
        echo "5. Checking processes:"
        ps aux | grep docker || echo "No docker processes visible"
        
        echo "6. Checking /var/run directory:"
        ls -la /var/run/ | grep docker || echo "No docker socket found"
        
        echo "7. Testing with Unix socket:"
        export DOCKER_HOST=unix:///var/run/docker.sock
        echo "DOCKER_HOST: $DOCKER_HOST"
        docker version || echo "Failed with Unix socket"
        
    - name: 🧪 Test Docker commands if working
      run: |
        # Try different Docker hosts until one works
        for host in "tcp://localhost:2375" "tcp://localhost:2376" "unix:///var/run/docker.sock"; do
          echo "Testing Docker host: $host"
          export DOCKER_HOST=$host
          
          # Disable TLS verification for TCP connections
          if [[ $host == tcp://* ]]; then
            export DOCKER_TLS_VERIFY=""
            export DOCKER_CERT_PATH=""
            echo "Disabled TLS verification for TCP connection"
          fi
          
          if docker version >/dev/null 2>&1; then
            echo "✅ Docker is working with host: $host"
            echo "Running basic Docker test..."
            docker run --rm hello-world
            echo "✅ Docker run test successful!"
            break
          else
            echo "❌ Docker failed with host: $host"
          fi
        done

    - name: 🏗️ Test Docker Buildx basics
      run: |
        echo "=== Testing Docker Buildx ==="
        
        echo "1. Buildx version:"
        docker buildx version
        
        echo "2. Available builders:"
        docker buildx ls
        
        echo "3. Current builder info:"
        docker buildx inspect --bootstrap
        
        echo "4. Create simple test Dockerfile:"
        cat > Dockerfile.test << 'EOF'
        FROM alpine:latest
        RUN echo "Hello from Buildx!" > /hello.txt
        CMD cat /hello.txt
        EOF
        
        echo "5. Build with Buildx:"
        docker buildx build \
          --platform linux/amd64 \
          --tag buildx-test:latest \
          --file Dockerfile.test \
          --load \
          .
        
        echo "6. Test the built image:"
        docker run --rm buildx-test:latest
        
        echo "7. Clean up:"
        docker rmi buildx-test:latest
        rm Dockerfile.test
        
        echo "✅ Docker Buildx basic test successful!"

    - name: 🌐 Test multi-platform build capability
      run: |
        echo "=== Testing Multi-platform Build ==="
        
        cat > Dockerfile.multiarch << 'EOF'
        FROM alpine:latest
        RUN uname -m > /arch.txt
        CMD echo "Architecture: $(cat /arch.txt)"
        EOF
        
        echo "Building for multiple platforms (without pushing):"
        docker buildx build \
          --platform linux/amd64,linux/arm64 \
          --tag multiarch-test:latest \
          --file Dockerfile.multiarch \
          .
        
        echo "✅ Multi-platform build test successful!"
        
        rm Dockerfile.multiarch
