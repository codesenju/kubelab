- hosts: k8s-control-plane-1
  become: true
  gather_facts: false
  vars:
    namespace: n8n
  tasks:
    - name: Deploy n8n ArgoCD Application
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: argoproj.io/v1alpha1
          kind: Application
          metadata:
            name: n8n
            namespace: argocd
            finalizers:
              - resources-finalizer.argocd.argoproj.io
          spec:
            project: default
            source:
              repoURL: https://github.com/codesenju/kubelab.git
              path: kustomize/n8n/overlays/prod
              targetRevision: main
              kustomize:
                labels:
                  app.kubernetes.io/instance: n8n
            destination:
              server: https://kubernetes.default.svc
              namespace: "{{ namespace }}"
            syncPolicy:
              automated:
                prune: true
                selfHeal: true
              syncOptions:
                - CreateNamespace=true
                - ServerSideApply=true
                - RespectIgnoreDifferences=true
            ignoreDifferences:
              - group: "postgresql.cnpg.io"
                kind: Cluster
                jsonPointers:
                  - /spec/managed/roles

    - name: Create n8n configmap for env vars
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: n8n-env
            namespace: "{{ namespace }}"
          data:
            N8N_HOST: "{{ n8n_domain }}"
            N8N_PORT: "443"
            N8N_PROTOCOL: "https"
            WEBHOOK_URL: "https://{{ n8n_domain }}/"

    - name: Create n8n ingress
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: n8n
            namespace: '{{ namespace }}'
            annotations:
              external-dns.alpha.kubernetes.io/target: '{{ ingress_nginx_ip }}'
              # cert-manager.io/cluster-issuer: letsencrypt-staging
          spec:
            ingressClassName: nginx
            tls:
            - hosts:
              - "n8n.{{ dns_name_1 }}"
              secretName: local-jazziro-com-tls
            rules:
            - host: "n8n.{{ dns_name_1 }}"
              http:
                paths:
                - path: /
                  pathType: Prefix
                  backend:
                    service:
                      name: n8n
                      port:
                        number: 5678
      tags: ingress