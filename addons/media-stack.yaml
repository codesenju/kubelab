- hosts: k8s-control-plane-1
  gather_facts: no
  become: no
  vars:
    namespace: media-stack
  tasks:

    - name: Deploy Media Stack
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: argoproj.io/v1alpha1
          kind: Application
          metadata:
            name: media-stack
            namespace: argocd
            finalizers:
              - resources-finalizer.argocd.argoproj.io
          spec:
            project: default
            source:
              repoURL: https://github.com/codesenju/kubelab.git
              path: kustomize/media-stack/overlays/production
              targetRevision: main
              kustomize:
                # Add these to your existing kustomize config
                commonAnnotations:
                  argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
                commonLabels:
                  app.kubernetes.io/instance: media-stack-prod
          
            destination:
              server: https://kubernetes.default.svc
              namespace: media-stack
          
            syncPolicy:
              automated:
                prune: true
                selfHeal: true
              syncOptions:
              - CreateNamespace=true
              - ServerSideApply=true
              - RespectIgnoreDifferences=true

            # ignoreDifferences:
            # - group: ""
            #   kind: PersistentVolumeClaim
            #   jsonPointers:
            #   - /status  # Ignore PVC status changes
      tags: media-stack

    - name: Create local wildcar certificate
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: cert-manager.io/v1
          kind: Certificate
          metadata:
            name: local-jazziro-com
            namespace: '{{ namespace }}'
          spec:
            secretName: local-jazziro-com-tls
            issuerRef:
              name: letsencrypt-production
              kind: ClusterIssuer
            commonName: "{{ dns_name_2 }}"
            dnsNames:
            - "{{ dns_name_1 }}"
            - "{{ dns_name_2 }}"

    - name: Create jellyfin IngressRoute
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: traefik.io/v1alpha1
          kind: IngressRoute
          metadata:
            name: jellyfin
            namespace: '{{ namespace }}'
            annotations:
              kubernetes.io/ingress.class: traefik
              external-dns.alpha.kubernetes.io/target: '{{ traefik_service_ip }}'
          spec:
            entryPoints:
              - websecure
            routes:
              - match: Host(`stream.{{ dns_name_1 }}`)
                kind: Rule
                services:
                  - name: jellyfin
                    kind: Service
                    port: 8096
            tls:
              secretName: local-jazziro-com-tls

    - name: Create flaresolverr IngressRoute
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: traefik.io/v1alpha1
          kind: IngressRoute
          metadata:
            name: flaresolverr
            namespace: '{{ namespace }}'
            annotations:
              kubernetes.io/ingress.class: traefik
              external-dns.alpha.kubernetes.io/target: '{{ traefik_service_ip }}'
          spec:
            entryPoints:
              - websecure
            routes:
              - match: Host(`flaresolverr.{{ dns_name_1 }}`)
                kind: Rule
                services:
                  - name: flaresolverr
                    kind: Service
                    port: 8191
            tls:
              secretName: local-jazziro-com-tls

    - name: Create jellyseerr IngressRoute
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: traefik.io/v1alpha1
          kind: IngressRoute
          metadata:
            name: jellyseerr
            namespace: '{{ namespace }}'
            annotations:
              kubernetes.io/ingress.class: traefik
              external-dns.alpha.kubernetes.io/target: '{{ traefik_service_ip }}'
          spec:
            entryPoints:
              - websecure
            routes:
              - match: Host(`catalog.{{ dns_name_1 }}`)
                kind: Rule
                services:
                  - name: jellyseerr
                    kind: Service
                    port: 5055
            tls:
              secretName: local-jazziro-com-tls

    - name: Create lidarr IngressRoute
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: traefik.io/v1alpha1
          kind: IngressRoute
          metadata:
            name: lidarr
            namespace: '{{ namespace }}'
            annotations:
              kubernetes.io/ingress.class: traefik
              external-dns.alpha.kubernetes.io/target: '{{ traefik_service_ip }}'
          spec:
            entryPoints:
              - websecure
            routes:
              - match: Host(`lidarr.{{ dns_name_1 }}`)
                kind: Rule
                services:
                  - name: lidarr
                    kind: Service
                    port: 8686
            tls:
              secretName: local-jazziro-com-tls

    - name: Create prowlarr IngressRoute
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: traefik.io/v1alpha1
          kind: IngressRoute
          metadata:
            name: prowlarr
            namespace: '{{ namespace }}'
            annotations:
              kubernetes.io/ingress.class: traefik
              external-dns.alpha.kubernetes.io/target: '{{ traefik_service_ip }}'
          spec:
            entryPoints:
              - websecure
            routes:
              - match: Host(`prowlarr.{{ dns_name_1 }}`)
                kind: Rule
                services:
                  - name: prowlarr
                    kind: Service
                    port: 9696
            tls:
              secretName: local-jazziro-com-tls

    - name: Create radarr IngressRoute
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: traefik.io/v1alpha1
          kind: IngressRoute
          metadata:
            name: radarr
            namespace: '{{ namespace }}'
            annotations:
              kubernetes.io/ingress.class: traefik
              external-dns.alpha.kubernetes.io/target: '{{ traefik_service_ip }}'
          spec:
            entryPoints:
              - websecure
            routes:
              - match: Host(`radarr.{{ dns_name_1 }}`)
                kind: Rule
                services:
                  - name: radarr
                    kind: Service
                    port: 7878
            tls:
              secretName: local-jazziro-com-tls

    - name: Create sonarr IngressRoute
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: traefik.io/v1alpha1
          kind: IngressRoute
          metadata:
            name: sonarr
            namespace: '{{ namespace }}'
            annotations:
              kubernetes.io/ingress.class: traefik
              external-dns.alpha.kubernetes.io/target: '{{ traefik_service_ip }}'
          spec:
            entryPoints:
              - websecure
            routes:
              - match: Host(`sonarr.{{ dns_name_1 }}`)
                kind: Rule
                services:
                  - name: sonarr
                    kind: Service
                    port: 8989
            tls:
              secretName: local-jazziro-com-tls

    - name: Create tdarr IngressRoute
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: traefik.io/v1alpha1
          kind: IngressRoute
          metadata:
            name: tdarr
            namespace: '{{ namespace }}'
            annotations:
              kubernetes.io/ingress.class: traefik
              external-dns.alpha.kubernetes.io/target: '{{ traefik_service_ip }}'
          spec:
            entryPoints:
              - websecure
            routes:
              - match: Host(`tdarr.{{ dns_name_1 }}`)
                kind: Rule
                services:
                - name: external-service
                  kind: TraefikService
                  servers:
                    - url: "http://192.168.0.58:8265"
            tls:
              secretName: local-jazziro-com-tls

