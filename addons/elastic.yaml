- hosts: k8s-control-plane-1
  gather_facts: no
  become: no
  vars:
    namespace: elastic-system
  tasks:
    - name: Deploy Elastic Operator
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: argoproj.io/v1alpha1
          kind: Application
          metadata:
            name: elastic-operator
            namespace: argocd
            finalizers:
              - resources-finalizer.argocd.argoproj.io
          spec:
            project: default
            source:
              chart: eck-operator
              repoURL: https://helm.elastic.co
              targetRevision: 3.1.0
              helm:
                releaseName: elastic-operator
            destination:
              server: https://kubernetes.default.svc
              namespace: elastic-system
            syncPolicy:
              automated:
                prune: true
                selfHeal: true
              syncOptions:
                - CreateNamespace=true
      tags: operator

    # üî• HOT STORAGE PV
    - name: Deploy Elasticsearch Hot PV
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: PersistentVolume
          metadata:
            name: es-hot-pv
            labels:
              storage: hot
          spec:
            capacity:
              storage: 50Gi
            nfs:
              server: 192.168.0.16
              path: /mnt/pool1/AppData/elastic/elasticsearch-hot
            accessModes:
              - ReadWriteOnce
            mountOptions:
              - noatime
              - nfsvers=4.2
      tags:
        - es-hot
        - es

    # ‚ùÑÔ∏è COLD STORAGE PV
    - name: Deploy Elasticsearch Cold PV
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: PersistentVolume
          metadata:
            name: es-cold-pv
            labels:
              storage: cold
          spec:
            capacity:
              storage: 200Gi
            nfs:
              server: 192.168.0.15
              path: /mnt/pool1/k8s/nfs/elastic/elasticsearch-cold
            accessModes:
              - ReadWriteOnce
            mountOptions:
              - noatime
              - nfsvers=4.2
      tags:
        - es
        - es-cold

    # üî• HOT PVC
    - name: Deploy Elasticsearch Hot PVC
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: PersistentVolumeClaim
          metadata:
            name: es-hot-pvc
            namespace: elastic-system
          spec:
            accessModes: [ "ReadWriteOnce" ]
            resources:
              requests:
                storage: 50Gi
            selector:
              matchLabels:
                storage: hot
            volumeName: es-hot-pv
            storageClassName: ""
      tags:
        - es
        - es-hot

    # ‚ùÑÔ∏è COLD PVC
    - name: Deploy Elasticsearch Cold PVC
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: PersistentVolumeClaim
          metadata:
            name: es-cold-pvc
            namespace: elastic-system
          spec:
            accessModes: [ "ReadWriteOnce" ]
            resources:
              requests:
                storage: 200Gi
            selector:
              matchLabels:
                storage: cold
            volumeName: es-cold-pv
            storageClassName: ""
      tags:
        - es
        - es-cold

    # üöÄ Elasticsearch with hot + cold nodes
    - name: Deploy Elasticsearch
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: elasticsearch.k8s.elastic.co/v1
          kind: Elasticsearch
          metadata:
            name: quickstart
            namespace: elastic-system
          spec:
            version: 9.1.3
            nodeSets:
              # üî• HOT tier
              - name: hot-nodes
                count: 1
                config:
                  node.roles: ["master","data_hot","data_content","ingest","remote_cluster_client","ml","transform"]
                  node.store.allow_mmap: false
                podTemplate:
                  spec:
                    volumes:
                      - name: hot-storage
                        persistentVolumeClaim:
                          claimName: es-hot-pvc
                    containers:
                      - name: elasticsearch
                        volumeMounts:
                          - name: hot-storage
                            mountPath: /usr/share/elasticsearch/data
                        resources:
                          requests:
                            memory: 2Gi
                            cpu: 1
                          limits:
                            memory: 3Gi
                            cpu: 2

              # ‚ùÑÔ∏è COLD tier
              - name: cold-nodes
                count: 1
                config:
                  node.roles: ["data_cold","remote_cluster_client"]
                  node.store.allow_mmap: false
                podTemplate:
                  spec:
                    volumes:
                      - name: cold-storage
                        persistentVolumeClaim:
                          claimName: es-cold-pvc
                    containers:
                      - name: elasticsearch
                        volumeMounts:
                          - name: cold-storage
                            mountPath: /usr/share/elasticsearch/data
                        resources:
                          requests:
                            memory: 1Gi
                            cpu: 1
                          limits:
                            memory: 2Gi
                            cpu: 1
      tags:
        - es
        - es-hot

    - name: Deploy Kibana
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: kibana.k8s.elastic.co/v1
          kind: Kibana
          metadata:
            name: quickstart
            namespace: elastic-system
          spec:
            config:
              server.publicBaseUrl: "{{ kibana_publicBaseUrl }}"
              # üîë Enable monitoring UI
              monitoring.ui.enabled: true
              # ‚úÖ Enable cross-cluster monitoring if you‚Äôll monitor multiple clusters
              monitoring.ui.ccs.enabled: true
            version: 9.1.3
            count: 1
            elasticsearchRef:
              name: quickstart
      tags:
        - kibana
        - es-hot

    - name: Get Elasticsearch password
      kubernetes.core.k8s_info:
        kind: Secret
        name: quickstart-es-elastic-user
        namespace: elastic-system
      register: es_secret
      tags:
        - get-elastic-password
        - es-hot

    - name: Set password fact
      set_fact:
        elastic_password: "{{ es_secret.resources[0].data.elastic | b64decode }}"
      tags:
        - get-elastic-password
        - es-hot

    - name: Display Elasticsearch access information
      ansible.builtin.debug:
        msg:
          - "----------------------------------------"
          - "üöÄ Elasticsearch stack deployed successfully!"
          - "----------------------------------------"
          - "üìç Elasticsearch URL: https://quickstart-es-http.elastic-system:9200"
          - "üìç Kibana URL: http://quickstart-kb-http.elastic-system:5601"
          - "üë§ Username: elastic"
          - "üîë Password: {{ elastic_password }}"
          - "----------------------------------------"
      tags:
        - get-elastic-password
        - es-hot

    - name: Create kibana IngressRoute
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: traefik.io/v1alpha1
          kind: IngressRoute
          metadata:
            name: kibana
            namespace: '{{ namespace }}'
            annotations:
              kubernetes.io/ingress.class: traefik
              external-dns.alpha.kubernetes.io/target: '{{ traefik_service_ip }}'
          spec:
            entryPoints:
              - websecure
            routes:
              - match: Host(`kibana.{{ dns_name_1 }}`)
                kind: Rule
                services:
                  - name: quickstart-kb-http
                    kind: Service
                    port: 5601
            tls:
              secretName: local-jazziro-com-tls
      tags: ingressroute

    - name: Create elasticsearch IngressRoute
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: traefik.io/v1alpha1
          kind: IngressRoute
          metadata:
            name: elasticsearch
            namespace: '{{ namespace }}'
            annotations:
              kubernetes.io/ingress.class: traefik
              external-dns.alpha.kubernetes.io/target: '{{ traefik_service_ip }}'
          spec:
            entryPoints:
              - websecure
            routes:
              - match: Host(`elasticsearch.{{ dns_name_1 }}`)
                kind: Rule
                services:
                  - name: quickstart-es-http
                    kind: Service
                    port: 9200
            tls:
              secretName: local-jazziro-com-tls
      tags:
        - ingressroute

    - name: Create kibana ingress
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: kibana
            namespace: '{{ namespace }}'
            annotations:
              nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
              external-dns.alpha.kubernetes.io/target: '{{ ingress_nginx_ip }}'
              # cert-manager.io/cluster-issuer: letsencrypt-production
          spec:
            ingressClassName: nginx
            tls:
              - hosts:
                  - "kibana.{{ dns_name_1 }}"
                secretName: local-jazziro-com-tls
            rules:
              - host: "kibana.{{ dns_name_1 }}"
                http:
                  paths:
                    - path: /
                      pathType: Prefix
                      backend:
                        service:
                          name: quickstart-kb-http
                          port:
                            number: 5601
      tags:
        - ingress
        - es-hot

    - name: Create es ingress
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: es
            namespace: '{{ namespace }}'
            annotations:
              nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
              external-dns.alpha.kubernetes.io/target: '{{ ingress_nginx_ip }}'
              # cert-manager.io/cluster-issuer: letsencrypt-production
          spec:
            ingressClassName: nginx
            tls:
              - hosts:
                  - "es.{{ dns_name_1 }}"
                secretName: local-jazziro-com-tls
            rules:
              - host: "es.{{ dns_name_1 }}"
                http:
                  paths:
                    - path: /
                      pathType: Prefix
                      backend:
                        service:
                          name: quickstart-es-http
                          port:
                            number: 9200
      tags:
        - ingress
        - es-hot