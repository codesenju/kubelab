- hosts: k8s-control-plane-1
  gather_facts: no 
  become: no
  vars:
    namespace: nginx-proxy-manager
  tasks:

    - name: Deploy nginx-proxy-manager
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: argoproj.io/v1alpha1
          kind: Application
          metadata:
            name: nginx-proxy-manager
            namespace: argocd
            finalizers:
              - resources-finalizer.argocd.argoproj.io
          spec:
            project: default
            source:
              repoURL: https://github.com/codesenju/kubelab.git
              path: kustomize/ngix-proxy-manager/overlays/prod
              targetRevision: main
              kustomize:
                # Add these to your existing kustomize config
                commonAnnotations:
                  argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
                commonLabels:
                  app.kubernetes.io/instance: nginx-proxy-manager-prod
            destination:
              server: https://kubernetes.default.svc
              namespace: nginx-proxy-manager
            syncPolicy:
              automated:
                prune: true
                selfHeal: true
              syncOptions:
              - CreateNamespace=true
              - ServerSideApply=true
              - RespectIgnoreDifferences=true

            # ignoreDifferences:
            # - group: ""
            #   kind: PersistentVolumeClaim
            #   jsonPointers:
            #   - /status  # Ignore PVC status changes
      tags: nginx-proxy-manager

    - name: Create local wildcar certificate
      kubernetes.core.k8s:
        state: absent
        definition:
          apiVersion: cert-manager.io/v1
          kind: Certificate
          metadata:
            name: local-jazziro-com
            namespace: '{{ namespace }}'
          spec:
            secretName: local-jazziro-com-tls
            issuerRef:
              name: letsencrypt-production
              kind: ClusterIssuer
            commonName: "{{ dns_name_2 }}"
            dnsNames:
            - "{{ dns_name_1 }}"
            - "{{ dns_name_2 }}"

    - name: Create nginx proxy manager IngressRoute
      kubernetes.core.k8s:
        state: absent
        definition:
          apiVersion: traefik.io/v1alpha1
          kind: IngressRoute
          metadata:
            name: nginx-proxy-manager
            namespace: '{{ namespace }}'
            annotations:
              kubernetes.io/ingress.class: traefik
              # external-dns.alpha.kubernetes.io/target: '{{ traefik_service_ip }}'
          spec:
            entryPoints:
              - websecure
            routes:
              - match: Host(`npm.{{ dns_name_1 }}`)
                kind: Rule
                services:
                  - name: nginx-proxy-manager
                    kind: Service
                    port: 81
            # tls:
            #   secretName: local-jazziro-com-tls

            