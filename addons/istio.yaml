- name: Install Istio with Ambient Profile and Bookinfo App
  hosts: k8s-control-plane-1
  become: true
  gather_facts: false
  vars:
    istio_version: "1.27.0"
  tasks:
    - name: Download Istio
      get_url:
        url: "https://github.com/istio/istio/releases/download/{{ istio_version }}/istio-{{ istio_version }}-linux-amd64.tar.gz"
        dest: /tmp/istio.tar.gz
        mode: '0644'

    - name: Extract Istio
      unarchive:
        src: /tmp/istio.tar.gz
        dest: /tmp
        remote_src: yes

    - name: Install istioctl
      copy:
        src: "/tmp/istio-{{ istio_version }}/bin/istioctl"
        dest: /usr/local/bin/istioctl
        mode: '0755'
        remote_src: yes

    - name: Install Istio with ambient profile
      shell: istioctl install --set profile=ambient --skip-confirmation
      register: istio_install
      changed_when: istio_install.rc == 0

    - name: Configure Istio with OpenTelemetry tracing
      shell: |
        cat <<EOF | istioctl install -y -f -
        apiVersion: install.istio.io/v1alpha1
        kind: IstioOperator
        spec:
          meshConfig:
            enableTracing: true
            extensionProviders:
            - name: otel-tracing
              opentelemetry:
                port: 4317
                service: opentelemetry-collector.observability.svc.cluster.local
                resource_detectors:
                  environment: {}
        EOF
      register: istio_otel_config
      changed_when: istio_otel_config.rc == 0

    - name: Apply Telemetry configuration
      shell: |
        kubectl apply -f - <<EOF
        apiVersion: telemetry.istio.io/v1
        kind: Telemetry
        metadata:
          name: otel-demo
        spec:
          tracing:
          - providers:
            - name: otel-tracing
            randomSamplingPercentage: 100
            customTags:
              "my-attribute":
                literal:
                  value: "default-value"
        EOF
      register: telemetry_config
      changed_when: telemetry_config.rc == 0

    - name: Install Prometheus
      kubernetes.core.k8s:
        state: present
        src: https://raw.githubusercontent.com/istio/istio/release-1.27/samples/addons/prometheus.yaml

    - name: Install Kiali
      kubernetes.core.k8s:
        state: present
        src: https://raw.githubusercontent.com/istio/istio/release-1.27/samples/addons/kiali.yaml

    - name: Create Kiali Gateway
      shell: |
        kubectl apply -f - <<EOF
        apiVersion: gateway.networking.k8s.io/v1
        kind: Gateway
        metadata:
          name: kiali-gateway
          namespace: istio-system
        spec:
          gatewayClassName: istio
          listeners:
          - name: http
            port: 80
            protocol: HTTP
            allowedRoutes:
              namespaces:
                from: Same
        ---
        apiVersion: gateway.networking.k8s.io/v1
        kind: HTTPRoute
        metadata:
          name: kiali
          namespace: istio-system
        spec:
          parentRefs:
          - name: kiali-gateway
          hostnames:
          - {{ kiali_domain }}
          rules:
          - backendRefs:
            - name: kiali
              port: 20001
        EOF
      register: kiali_gateway
      changed_when: kiali_gateway.rc == 0

    - name: Check if Gateway API CRDs exist
      shell: kubectl get crd gateways.gateway.networking.k8s.io
      register: gateway_crd_check
      failed_when: false
      changed_when: false

    - name: Install Gateway API CRDs
      kubernetes.core.k8s:
        state: present
        src: https://github.com/kubernetes-sigs/gateway-api/releases/download/v1.3.0/standard-install.yaml
      when: gateway_crd_check.rc != 0

    - name: Create bookinfo namespace
      kubernetes.core.k8s:
        name: bookinfo
        api_version: v1
        kind: Namespace
        state: present

    - name: Label bookinfo namespace for ambient mode
      shell: kubectl label namespace bookinfo istio.io/dataplane-mode=ambient
      register: label_namespace
      changed_when: label_namespace.rc == 0

    - name: Deploy Bookinfo application
      shell: kubectl apply -f https://raw.githubusercontent.com/istio/istio/release-1.27/samples/bookinfo/platform/kube/bookinfo.yaml -n bookinfo
      register: bookinfo_deploy
      changed_when: bookinfo_deploy.rc == 0

    - name: Deploy Bookinfo versions
      shell: kubectl apply -f https://raw.githubusercontent.com/istio/istio/release-1.27/samples/bookinfo/platform/kube/bookinfo-versions.yaml -n bookinfo
      register: bookinfo_versions_deploy
      changed_when: bookinfo_versions_deploy.rc == 0

    - name: Deploy Bookinfo Gateway
      shell: kubectl apply -f https://raw.githubusercontent.com/istio/istio/release-1.27/samples/bookinfo/gateway-api/bookinfo-gateway.yaml -n bookinfo
      register: gateway_deploy
      changed_when: gateway_deploy.rc == 0
 
    - name: Restart bookinfo pods for ambient mode
      shell: kubectl rollout restart deployment -n bookinfo
      register: restart_pods
      changed_when: restart_pods.rc == 0

    - name: Wait for productpage pods to be ready
      shell: kubectl wait --for=condition=Ready pods -l app=productpage -n bookinfo --timeout=200s
      register: productpage_ready
      changed_when: false

    - name: Generate traffic to bookinfo app
      shell: |
        for i in {1..10}; do
          kubectl exec -n bookinfo deployment/productpage-v1 -- curl -s http://productpage:9080/productpage > /dev/null
          sleep 1
        done
      register: traffic_gen
      changed_when: false

    - name: Clean up temporary files
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - /tmp/istio.tar.gz
        - "/tmp/istio-{{ istio_version }}"

    - name: Display Istio installation info
      debug:
        msg:
          - "üöÄ Istio installed successfully with ambient profile!"
          - "üìö Bookinfo application deployed"
          - "üåê Gateway API CRDs installed"
          - "Use 'kubectl get pods -n istio-system' to check Istio components"
