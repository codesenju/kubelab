- hosts: control-plane
  become: yes
  tasks:
    - name: Create an Empty file for Kubeadm configuring
      copy:
        content: ""
        dest: /etc/kubernetes/kubeadm-config.yaml
        force: no

    - name: Configure container runtime and control plane
      block:
        - blockinfile:
            path: /etc/kubernetes/kubeadm-config.yaml
            block: |
              kind: ClusterConfiguration
              apiVersion: kubeadm.k8s.io/v1beta3
              networking:
                podSubnet: "{{ pod_cidr }}"
              controlPlaneEndpoint: "{{ hostvars['nginx-server']['ansible_host'] }}:6443"
              ---
              kind: KubeletConfiguration
              apiVersion: kubelet.config.k8s.io/v1beta1
              runtimeRequestTimeout: "15m"
              cgroupDriver: "systemd"
              systemReserved:
                cpu: 100m
                memory: 350M
              kubeReserved:
                cpu: 100m
                memory: 50M
              enforceNodeAllocatable:
              - pods
      rescue:
        - name: Fail with custom message
          fail:
            msg: "Failed to configure container runtime and control plane. Playbook will exit!"


    - name: Initialize the first control plane
      shell: kubeadm init --config /etc/kubernetes/kubeadm-config.yaml --upload-certs >> cluster_initialized.log
      args:
        chdir: $HOME
        creates: cluster_initialized.log
      when: inventory_hostname == "k8s-control-plane-1"

    - name: Create .kube directory
      file:
        path: $HOME/.kube
        state: directory
        mode: 0755

    - name: Copy admin.conf to User's kube config
      copy:
        src: /etc/kubernetes/admin.conf
        dest: $HOME/.kube/config
        remote_src: yes
        owner: "{{ ansible_user }}"
      when: inventory_hostname == "k8s-control-plane-1"

    - name: Get join command for control plane
      shell: kubeadm token create --print-join-command
      register: join_command_control_plane
      when: inventory_hostname == "k8s-control-plane-1"

    - name: Get certificate key
      shell: kubeadm init phase upload-certs --upload-certs | tail -1
      register: cert_key
      when: inventory_hostname == "k8s-control-plane-1"

    # - name: Join additional control plane nodes
    #   shell: "{{ hostvars['k8s-control-plane-1']['join_command_control_plane'].stdout }} --control-plane --certificate-key {{ hostvars['k8s-control-plane-1']['cert_key'].stdout }}"
    #   when: inventory_hostname == "k8s-control-plane-2"

    - name: Join additional control plane nodes
      shell: "{{ hostvars['k8s-control-plane-1']['join_command_control_plane'].stdout }} --control-plane --certificate-key {{ hostvars['k8s-control-plane-1']['cert_key'].stdout }}"
      when: inventory_hostname in ["k8s-control-plane-2", "k8s-control-plane-3"]

    - name: Install Pod Network
      shell: kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml >> pod_network_setup.log
      args:
        chdir: $HOME
        creates: pod_network_setup.log
      when: inventory_hostname == "k8s-control-plane-1"

- hosts: k8s-control-plane-1
  become: yes
  tasks:
    - name: Get worker join command
      shell: kubeadm token create --print-join-command
      register: worker_join_command

    - name: Save join command to a variable
      set_fact:
        worker_join_command: "{{ worker_join_command.stdout }}"

- hosts: workers
  become: yes
  tasks:
    - name: Join worker nodes
      shell: "{{ hostvars['k8s-control-plane-1']['worker_join_command'] }}"
